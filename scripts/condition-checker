#!/usr/bin/env python3
'''
This is a script to check on lua scenes. It's far from feature complete right now.

Currently it's only capable of handling device-related conditions
'''

import requests, requests.auth
import argparse
import os
import json
import slpp

from pprint import pprint

parser = argparse.ArgumentParser(description = 'Check a scene and evaluate the device conditions')
parser.add_argument('-H', '--host', type=str, dest='host',
                    help='Hostname or IP of the HC3. Defaults to HC3_HOST envvar')
parser.add_argument('-u', '--user', type=str, dest='user',
                    help='Username for the HC3. Defaults to HC3_USER envvar')
parser.add_argument('-p', '--pass', type=str, dest='passwd',
                    help='Password for the HC3. Defaults to HC3_PASS envvar')
parser.add_argument('-s', '--scene', type=int, dest='sceneid', required=True,
                    help='Specify the scene id')

args = parser.parse_args()

# check the envvars if args are not set
if args.host is None: args.host = os.environ.get('HC3_HOST', None)
if args.user is None: args.user = os.environ.get('HC3_USER', None)
if args.passwd is None: args.passwd = os.environ.get('HC3_PASS', None)

if args.host is None: raise Exception('host needs to be set')
if args.user is None: raise Exception('user needs to be set')
if args.passwd is None: raise Exception('passwd needs to be set')

class FibaroHC3():
    '''
    Class for fibaro interactions
    '''

    def __init__(self, host, user, passwd):
        self._host = host
        self._user = user
        self._passwd = passwd
        pass

    def getscene(self, sceneid):
        '''
        Fetches a scene's conditions and actions
        '''
        url = 'http://{host}/api/scenes/{id}'.format(host = self._host,
                                                     id = sceneid)
        resp = requests.get(url,
                            auth = requests.auth.HTTPBasicAuth(self._user, self._passwd))
        scene = resp.json()
        #pprint(scene)
        content = json.loads(scene['content'])
        #pprint(content)
        return (slpp.slpp.decode(content['conditions']), content['actions'])

    def getdevice(self, deviceid):
        '''
        Retrieves a device's status from the API
        '''
        url = 'http://{host}/api/devices/{id}'.format(host = self._host,
                                                     id = deviceid)
        resp = requests.get(url,
                            auth = requests.auth.HTTPBasicAuth(self._user, self._passwd))
        res = resp.json()
        #pprint(['device', res])
        return res

    def evaluate(self, conditions):
        '''
        Recursive function to evaluate the condition structure
        Calls out to the HC3 to fetch device statuses
        '''
        #pprint(['evaluate', conditions])

        if 'conditions' in conditions:
            ctype = conditions['operator']
            if ctype not in ['all', 'any']:
                raise Exception('Unknown condition operator: {ct}'.format(ct = ctype))

            results = [self.evaluate(block) for block in conditions['conditions']]
            if ctype == 'all': result= all(results)
            if ctype == 'any': result= any(results)
            conditions['result'] = result
            return result
            pass
        elif 'type' in conditions and conditions['type'] == 'device':
            dev = self.getdevice(conditions['id'])
            prop = conditions['property']
            devvalue = dev['properties'][prop]
            op = conditions['operator']

            if op == '==':
                result = devvalue == conditions['value']
            elif op == '!=':
                result = devvalue != conditions['value']
            else:
                raise Exception('Unsupported operator {op}'.format(op=op))
            #pprint(['device condition', conditions, prop, devvalue, result])
            conditions['devvalue'] = devvalue
            conditions['devname'] = dev['name']
            conditions['result'] = result
            return result
        else:
            pprint(conditions)
            raise Exception('Unsupported block')
        pass
    pass

def pretty(conditions, lvl:int=0):
    '''
    Pretty prints the result by the modified condition structure
    '''
    #pprint(['PRETTY', type(conditions), conditions])
    indent = ' '*lvl
    if 'conditions' in conditions:
        print('{i}conditions,{op} = {res}'.format(i=indent,
                                                  op = conditions['operator'],
                                                  res = conditions['result']))
        for c in conditions['conditions']:
            pretty(c, lvl+1)
            pass
    elif 'type' in conditions and conditions['type'] == 'device':
        print('{i}device,{id},{prop},{op},{val} vs {devval} = {res} ({devname})'\
              .format(i = indent,
                      id = conditions['id'],
                      prop = conditions['property'],
                      op = conditions['operator'],
                      val = conditions['value'],
                      devval = conditions['devvalue'],
                      res = conditions['result'],
                      devname = conditions['devname']))
    else:
        raise Exception('Unsupported block')
    pass

hc3 = FibaroHC3(args.host, args.user, args.passwd)
conditions,_ = hc3.getscene(args.sceneid)
res = hc3.evaluate(conditions)
#pprint(conditions)
#pprint(['final result', res])
#pprint(conditions)
pretty(conditions)
